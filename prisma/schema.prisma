// This is your Prisma schema file,
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_DEV")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum UserRole {
  ADMIN
  USER
}

enum CattleStatus {
  PARIDA
  SOLTEIRA
  NOVILHA
  LACTANTE
}

enum Avaliacao {
  CICLICANDO
  NAO_CICLANDO
  SUSPEITA
  DESCARTE
  ATRASADA
  GESTANTE
}

enum ManejoType {
  D0
  D8
  D11
  DG
}

enum ManejoResult {
  GESTANTE
  NAO_GESTANTE
  PARIDA
  SOLTEIRA
  DESCARTE
  EM_ANDAMENTO
}

model Organization {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  users       User[]
  farms       Farm[]    // Organização possui fazendas

  @@map("organizations")
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique @map("email")
  name            String?
  password        String     @map("password")
  role            UserRole   @default(USER)
  status          UserStatus @default(ACTIVE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?
  
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model Farm {
  id          String    @id @default(uuid())
  name        String
  address     String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  owner       String?   // Nome do proprietário da fazenda (campo informativo)
  
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  
  animals     Animal[]
  Manejos     Manejo[]
  cycles      Cycle[]

  @@map("farms")
}

model Animal {
  id            String        @id @default(uuid())
  identifier    String        // Código ou brinco de identificação
  breed         String?       // Raça
  birthDate     DateTime?
  weight        Float?
  cattleStatus  CattleStatus  @default(SOLTEIRA)
  avaliacao     Avaliacao?
  gestationalAge Int?         // Idade gestacional em dias
  observation   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  
  farm          Farm          @relation(fields: [farmId], references: [id])
  farmId        String

  manejos     Manejo[]

  @@map("animals")
}

model Cycle {
  id          String    @id @default(uuid())
  farmId      String
  farm        Farm      @relation(fields: [farmId], references: [id])
  name        String?
  startDate   DateTime
  endDate     DateTime?
  status      String    @default("EM_ANDAMENTO") // EM_ANDAMENTO, CONCLUIDO
  technician  String?
  manejos     Manejo[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("cycles")
}

model Manejo {
  id              String          @id @default(uuid())
  date            DateTime        // Data do Manejoo/visita
  type            ManejoType      // Tipo de Manejoo (D0, D8, D11, DG)
  technician      String?         // Nome do técnico responsável
  result          ManejoResult?   // Resultado do Manejoo
  presence        Boolean         @default(true) // Presença confirmada
  cycleId         String          // Identificador do ciclo para agrupar Manejoos
  cycle           Cycle           @relation(fields: [cycleId], references: [id])
  nextManejoDate  DateTime?       // Data prevista para o próximo Manejoo
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  
  animals          Animal[]
  
  farm            Farm            @relation(fields: [farmId], references: [id])
  farmId          String

  @@map("Manejos")
}
